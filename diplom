import requests
# from urllib.parse import urlencode
import json
import time
import sys

# APP_ID = 6984668
# BASE_URL = 'https://oauth.vk.com/authorize'
# token = ''
# auth_data = {
#     'client_id': APP_ID,
#     'display': 'page',
#     'scope': 262146,
#     'response_type': 'token',
#     'v': '5.95'
# }

# print('?'.join((BASE_URL, urlencode(auth_data))))

TOKEN = '73eaea320bdc0d3299faa475c196cfea1c4df9da4c6d291633f9fe8f83c08c4de2a3abf89fbc3ed8a44e1'

user_name = input('Введите имя пользователя или его id: ')
# user_name = 'eshmargunov'
# user_name = 171691064


class User:
    def __init__(self, TOKEN, user_name):
        self.token = TOKEN
        self.user_name = user_name
        try:
            self.user_id = int(user_name)
        except:
            params = {
                'access_token': self.token,
                'screen_name': self.user_name,
                'v': '5.95'
            }
            response = requests.get(
                'https://api.vk.com/method/utils.resolveScreenName',
                params
            )
            try:
                print('Получение id пользователя из его короткого имени')
                self.user_id = response.json()['response']['object_id']
            except KeyError:
                print('У пользователя {} не получен id'.format(self.user_name))
                sys.exit()

    def __str__(self):
        try:
            self.user_id = int(user_name)
            return 'https://vk.com/id{}'.format(self.user_id)
        except:
            return 'https://vk.com/{}'.format(self.user_name)

    def get_params(self):
        return dict(
            access_token=self.token,
            user_id=self.user_id,
            v='5.95'
        )

    def get_friends(self):
        params = self.get_params()
        response = requests.get(
            'https://api.vk.com/method/friends.get',
            params
        )
        try:
            print('Получение списка друзей пользователя https://vk.com/id{}'.format(self.user_id))
            user_friends = response.json()['response']['items']
        except KeyError:
            print('Пользователь https://vk.com/id{} ограничил доступ к своим друзьям,'
                  ' удален или заблокирован'.format(self.user_id))
        else:
            return user_friends

    def get_groups(self):
        params = self.get_params()
        response = requests.get(
            'https://api.vk.com/method/groups.get',
            params
        )
        try:
            user_groups = response.json()['response']['items']
            print('Получение списка групп пользователя https://vk.com/id{}'.format(self.user_id))
        except KeyError:
            print('Пользователь https://vk.com/id{} ограничил доступ к своим группам,'
                  ' удален или заблокирован'.format(self.user_id))
        else:
            return user_groups

    def differences_groups(self):
        user_friends = self.get_friends()
        time.sleep(0.5)
        user_groups = set(self.get_groups())
        groups_friends = set()
        quantity = 0
        for friend in user_friends:
            time.sleep(0.5)
            self.user_id = friend
            try:
                groups_friend = self.get_groups()
                groups_friends.update(set(groups_friend))
            except TypeError:
                quantity += 1
        time.sleep(0.5)
        differences_groups = list(user_groups.difference(groups_friends))
        list_differences_groups = []
        time.sleep(0.5)
        for group in differences_groups:
            time.sleep(0.5)
            params = {
                'group_id': group,
                'fields': 'members_count'
            }
            params.update(self.get_params())
            response = requests.get(
                'https://api.vk.com/method/groups.getById',
                params
            )
            print('Получение информации о группе https://vk.com/public{},'
                  ' в которой состоит только пользователь'.format(group))
            try:
                information_group = response.json()['response'][0]
                dict_differences_groups = {
                    'name': information_group['name'],
                    'gid': information_group['id'],
                    'members_count': information_group['members_count'],
                }
                list_differences_groups.append(dict_differences_groups)
            except KeyError:
                dict_differences_groups = {
                    'name': information_group['name'],
                    'gid': information_group['id'],
                    'members_count': '[no data]',
                }
                list_differences_groups.append(dict_differences_groups)
        print('У {} пользователя(ей) не получен список групп'.format(quantity))
        with open('groups.json', 'w', encoding='utf-8') as f:
            json.dump(list_differences_groups, f, ensure_ascii=False, indent=2)
        return

    def common_groups(self):
        user_friends = self.get_friends()
        time.sleep(0.5)
        user_groups = set(self.get_groups())
        groups_friends = set()
        quantity = 0
        for friend in user_friends:
            time.sleep(0.5)
            self.user_id = friend
            try:
                groups_friend = set(self.get_groups())
                groups_friends.update(groups_friend)
            except TypeError:
                quantity += 1
        time.sleep(0.5)
        common_groups = list(user_groups.intersection(groups_friends))
        list_common_groups = []
        time.sleep(0.5)
        for group in common_groups:
            time.sleep(0.5)
            params = {
                'group_id': group,
                'fields': 'members_count'
            }
            params.update(self.get_params())
            response = requests.get(
                'https://api.vk.com/method/groups.getById',
                params
            )
            print('Получение информации о группе https://vk.com/public{},'
                  ' в которой состоят друзья пользователя'.format(group))
            try:
                information_group = response.json()['response'][0]
                dict_common_groups = {
                    'name': information_group['name'],
                    'gid': information_group['id'],
                    'members_count': information_group['members_count'],
                }
                list_common_groups.append(dict_common_groups)
            except KeyError:
                dict_common_groups = {
                    'name': information_group['name'],
                    'gid': information_group['id'],
                    'members_count': '[no data]',
                }
                list_common_groups.append(dict_common_groups)
        print('У {} пользователя(ей) не получен список групп'.format(quantity))
        with open('common_groups.json', 'w', encoding='utf-8') as f:
            json.dump(list_common_groups, f, ensure_ascii=False, indent=2)
        return


user = User(TOKEN, user_name)
print(user)
user.differences_groups()
# user.common_groups()
